---
# SPDX-FileCopyrightText: Nicola Sella
#
# SPDX-License-Identifier: GPL-3.0-or-later

# configuration file for drupal
morla_drupal_enabled: false

morla_drupal_flag_public: true
morla_drupal_flag_autostart: true
morla_drupal_flag_wireguard: true
morla_drupal_flag_firewall: true # replace with if port list non empty

# Name
morla_drupal_long_name: Drupal
morla_drupal_short_name: drupal

morla_drupal_container_short_name: '{{ morla_drupal_short_name }}'
morla_drupal_container_name: '{{ morla_user_username }}-{{ morla_drupal_container_short_name }}'
morla_drupal_public_url: 'drupal.{{ morla_public_url }}'

morla_drupal_pod_name: '{{ morla_drupal_container_name }}-p'

morla_drupal_container_image_base: docker.io/library/drupal
morla_drupal_container_image_tag: latest
morla_drupal_container_image: '{{ morla_drupal_container_image_base }}:{{ morla_drupal_container_image_tag }}'

# Networking
morla_drupal_reverse_proxy_port: '23123'
morla_drupal_exposed_proxy_port: '80'

# Networking/Firewall
morla_drupal_fw_ports:
    tcp:
        - '{{ morla_drupal_reverse_proxy_port }}'
    udp:

# Networking/Port Forwarding
morla_drupal_ports:
    - '{{ morla_drupal_reverse_proxy_port }}:{{ morla_drupal_exposed_proxy_port }}'

# Storage/Host
morla_drupal_config_dir: '{{ morla_config_dir }}/{{ morla_drupal_long_name }}'
morla_drupal_modules_dir: '{{ morla_drupal_config_dir }}/modules'
morla_drupal_profiles_dir: '{{ morla_drupal_config_dir }}/profiles'
morla_drupal_themes_dir: '{{ morla_drupal_config_dir }}/themes'
morla_drupal_sites_dir: '{{ morla_drupal_config_dir }}/sites'

# Storage/Mount
morla_drupal_volumes:
    - '{{ morla_drupal_modules_dir }}:/var/www/html/modules:Z'
    - '{{ morla_drupal_profiles_dir }}:/var/www/html/profiles:Z'
    - '{{ morla_drupal_themes_dir }}:/var/www/html/themes:Z'
    - '{{ morla_drupal_sites_dir }}:/var/www/html/sites:Z'
# It's a big mess so here are the steps required to make it work
# First, the directory sites should be automatically created by Ansible
# Second, the content of the dir should be populated
# $ podman run --rm drupal tar -cC /var/www/html/sites . | tar -xC ~/Config/Drupal/sites
# Then go to the drupal page and run the installer. If it complains follow the troubleshooting steps
# in core/INSTALL.txt
# ...
# 3. Run the install script.
#
#    To run the install script, point your browser to the base URL of your
#    website (e.g., http://www.example.com).
#
#    You will be guided through several screens to set up the database, add the
#    site maintenance account (the first user, also known as user/1), and provide
#    basic website settings.
#
#    During installation, several files and directories need to be created, which
#    the install script will try to do automatically. However, on some hosting
#    environments, manual steps are required, and the install script will tell
#    you that it cannot proceed until you fix certain issues. This is normal and
#    does not indicate a problem with your server.
#
#    The most common steps you may need to perform are:
#
#    a. Missing files directory.
#
#       The install script will attempt to create a public file storage directory
#       in the default location at sites/default/files (the location of the files
#       directory may be changed after Drupal is installed).
#
#       If auto-creation fails, you can create the directory yourself. (If you are
#       creating a multisite installation, substitute the correct sites directory
#       for sites/default; see the Multisite Configuration section of this file,
#       below.) Sample commands from a Unix/Linux command line:
#
#         mkdir sites/default/files
#         chmod a+w sites/default/files
#
#       Alternatively, you can make the install script work by changing
#       permissions on the sites/default directory. The web server can then
#       create the files directory within it for you.
#
#       For example, on a Unix/Linux command line, you can grant everyone
#       (including the web server) permission to write to the sites/default
#       directory with this command:
#
#         chmod a+w sites/default
#
#       Then re-run install.php (e.g. by clicking "try again" at the bottom of
#       the Requirements problem page. Once the files directory is created, you
#       will need to grant everyone (including the web server) permission to
#       write to it with this command:
#
#         chmod a+w sites/default/files
#
#       Be sure to set the permissions for the default directory back after the
#       installation is finished! (Leave the files directory writable.)
#       Sample command:
#
#         chmod go-w sites/default
#
#    b. Missing settings file.
#
#       Drupal will try to automatically create a settings.php configuration file,
#       which is normally in the directory sites/default (to avoid problems when
#       upgrading, Drupal is not packaged with this file). If auto-creation fails,
#       you will need to create this file yourself, using the file
#       sites/default/default.settings.php as a template.
#
#       For example, on a Unix/Linux command line, you can make a copy of the
#       default.settings.php file with the command:
#
#         cp sites/default/default.settings.php sites/default/settings.php
#
#       Next, grant write privileges to the file to everyone (including the web
#       server) with the command:
#
#         chmod a+w sites/default/settings.php
#
#       Be sure to set the permissions back after the installation is finished!
#       Sample command:
#
#         chmod go-w sites/default/settings.php
#
#    c. Write permissions after install.
#
#       The install script will attempt to write-protect the settings.php file and
#       the sites/default directory after saving your configuration. If this
#       fails, you will be notified, and you can do it manually. Sample commands
#       from a Unix/Linux command line:
#
#         chmod go-w sites/default/settings.php
#         chmod go-w sites/default
#
# 4. Verify that the site is working.
# ... End of the config. After step 3 it should work
#
# TLDR
# 1.
# podman run --rm drupal tar -cC /var/www/html/sites . | tar -xC ~/Config/Drupal/sites
# mkdir sites/default/files
# chmod a+w sites/default/files
# cp sites/default/default.settings.php sites/default/settings.php
# chmod a+w sites/default/settings.php
# 
# 2.
# chmod go-w sites/default/settings.php
# chmod go-w sites/default

# Labels/Traefik
morla_drupal_labels:
    traefik.enable: '{{ morla_drupal_flag_public }}'
    traefik.http.services.drupal.loadbalancer.server.port: '{{ morla_drupal_reverse_proxy_port }}'
    traefik.http.routers.drupal.tls: true
    traefik.http.routers.drupal.rule: Host(`{{ morla_drupal_public_url }}`)
    traefik.http.routers.drupal.entrypoints: websecure
    traefik.http.routers.drupal.tls.certresolver: myresolver

# DB
# Name
morla_drupal_db_long_name: DrupalDB
morla_drupal_db_short_name: drupal-db

morla_drupal_db_container_short_name: '{{ morla_drupal_db_short_name }}'
morla_drupal_db_container_name: '{{ morla_user_username }}-{{ morla_drupal_db_container_short_name }}'

morla_drupal_db_container_image_base: docker.io/library/postgres
morla_drupal_db_container_image_tag: latest
morla_drupal_db_container_image: '{{ morla_drupal_db_container_image_base }}:{{ morla_drupal_db_container_image_tag }}'

# Environment
morla_drupal_db_env_postgres_user: drupal
morla_drupal_db_env_postgres_password: '{{ morla_drupal_db_password}}'
morla_drupal_db_env_postgres_db: drupal-db

# Storage/Host
morla_drupal_db_config_dir: '{{ morla_config_dir }}/{{ morla_drupal_db_long_name }}'

# Storage/Mount
morla_drupal_db_volumes:
    - '{{ morla_drupal_db_config_dir }}:/var/lib/postgresql/data:Z'
